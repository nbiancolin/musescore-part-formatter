name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release (major, minor, patch)"
        required: true
        default: "patch"

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository (full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # <<-- important: ensures tags & history are present

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Ensure tags are available & get latest tag
        id: get_tag
        run: |
          set -eux

          # if this is a shallow checkout, try to unshallow (safe to ignore failure)
          git fetch --prune --unshallow || true

          # fetch tags from remote
          git fetch --tags --force

          # show tags (debug)
          echo "Top tags (by version sort):"
          git tag --list --sort=-v:refname | sed -n '1,20p' || true

          # pick the latest tag by version sort; fallback to create a default
          latest_tag=$(git tag --list --sort=-v:refname | head -n1 || true)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi

          echo "latest_tag=$latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Bump version, create & push tag
        id: bump_and_tag
        run: |
          set -eux
          old="${{ env.latest_tag }}"
          echo "Old tag: $old"

          # extract numeric version portion (handles v1.2.3 or prefix-1.2.3)
          ver=$(echo "$old" | grep -oE '[0-9]+(\.[0-9]+){0,2}' || echo "0.0.0")
          IFS='.' read -r major minor patch <<< "$ver"
          major=${major:-0}; minor=${minor:-0}; patch=${patch:-0}

          case "${{ github.event.inputs.release_type }}" in
            major)
              major=$((major + 1)); minor=0; patch=0;;
            minor)
              minor=$((minor + 1)); patch=0;;
            patch)
              patch=$((patch + 1));;
            *)
              echo "Unknown release_type, defaulting to patch"; patch=$((patch + 1));;
          esac

          new="v${major}.${minor}.${patch}"
          echo "New tag: $new"

          # export so following steps can read it
          echo "new_tag=$new" >> $GITHUB_ENV

          # create and push the tag
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$new"
          git push origin "$new"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: p
